{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/HeapSort.js","SortingAlgorithms/InsertionSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingAlgorithms/BubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimation","mainArray","animations","length","tempArray","slice","sort","left","right","middle","Math","floor","i","j","k","push","merge","getQuickSortAnimation","quickSort","p","pivot","temp","partition","getHeapSortAnimation","n","heapify","heapSort","index","largestIndex","leftNodeIndex","rightNodeIndex","getInsertionSortAnimation","current","insertionSort","DEFAULT_COLOR","SortingVisualizer","props","state","array","size","sortingSpeedMS","isSorting","handleArraySizeChange","bind","handleSpeedChange","this","resetArray","randomIntFromInterval","setState","turnButtons","playSortingAnimation","hasIterationSwap","swap","bubbleSort","getBubbleSortAnimation","arrayBars","document","getElementsByClassName","barOneIdx","barOneNewHeight","barTwoIdx","barTwoNewHeight","isSwap","color","setTimeout","style","height","barOneStyle","barTwoStyle","newColor","backgroundColor","playCompleteAnimation","delay","e","target","value","newSpeed","className","map","idx","id","type","min","max","step","defaultValue","onChange","disabled","onClick","mergeSort","buttons","sliders","javaScriptSortedArray","a","b","sortedArray","console","log","arraysAreEqual","React","Component","random","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.24c8b2c0.chunk.js","sourcesContent":["/**\r\n * Perform merge sort then return animation array.\r\n * @param {*} mainArray the main array.\r\n * @returns animation array.\r\n */\r\nexport function getMergeSortAnimation(mainArray){\r\n  const animations = [];\r\n  if (mainArray.length <= 1) return mainArray;\r\n  const tempArray = mainArray.slice();\r\n  sort(mainArray, 0, mainArray.length - 1, tempArray, animations);\r\n  return animations;\r\n}\r\n\r\n/**\r\n * Merge sort helper 1, divided main array into two small arrays and then merge them recurisvely.\r\n * @param {*} mainArray the main array.\r\n * @param {*} left the left index.\r\n * @param {*} right the right index.\r\n * @param {*} tempArray the dummy array.\r\n * @param {*} animations the animation array.\r\n */\r\nfunction sort(mainArray, left, right, tempArray, animations){\r\n  if(left < right){\r\n    let middle = Math.floor((left + right) / 2);\r\n    sort(tempArray, left, middle, mainArray, animations);\r\n    sort(tempArray, middle + 1, right, mainArray, animations);\r\n    merge(mainArray, left, middle, right, tempArray, animations);\r\n  }\r\n}\r\n\r\n/**\r\n * Merge sort helper funtion 2, merge two arrays at the given indexs at the main array \r\n * and add animation to the animation array.\r\n * \r\n * Animation array format: \r\n * [bar one index, bar one new height, bar two index, bar two new height, swap(boolean), color(String)]\r\n * \r\n * @param {*} mainArray the main array.\r\n * @param {*} left left index.\r\n * @param {*} middle middle index.\r\n * @param {*} right right index.\r\n * @param {*} tempArray the dummy array.\r\n * @param {*} animations the animation array.\r\n */\r\nfunction merge(mainArray, left, middle, right, tempArray, animations){\r\n  let i = left;\r\n  let j = middle + 1;\r\n  let k = left;\r\n  \r\n  while(i <= middle && j <= right){\r\n    animations.push([i, null, j, null, false, 'compare']);\r\n    animations.push([i, null, j, null, false, 'default']);\r\n\r\n    if(tempArray[i] <= tempArray[j]){\r\n      animations.push([k, tempArray[i], null, null, true, null]);\r\n      mainArray[k++] = tempArray[i++];\r\n    } else {\r\n      animations.push([k, tempArray[j], null, null, true, null]);\r\n      mainArray[k++] = tempArray[j++];\r\n    }\r\n  }\r\n  while(i <= middle) {\r\n    animations.push([i, null, i, null, false, 'compare']);\r\n    animations.push([i, null, i, null, false, 'default']);\r\n\r\n    animations.push([k, tempArray[i], null, null, true, null]);\r\n    mainArray[k++] = tempArray[i++];\r\n  }\r\n  while(j <= right) {\r\n    animations.push([j, null, j, null, false, 'compare']);\r\n    animations.push([j, null, j, null, false, 'default']);\r\n\r\n    animations.push([k, tempArray[j], null, null, true, null])\r\n    mainArray[k++] = tempArray[j++];\r\n  }\r\n}  ","/**\r\n * Perform quick sort then return animation array.\r\n * @param {*} mainArray the main array.\r\n * @returns animation array.\r\n */\r\nexport function getQuickSortAnimation(mainArray) {\r\n  const animations = [];\r\n  quickSort(mainArray, 0, mainArray.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\n/**\r\n * Perform quick sort sort algorithm on the main array.\r\n * \r\n * Animation array format: \r\n * [bar one index, bar one new height, bar two index, bar two new height, swap(boolean), color(String)]\r\n * \r\n * @param {*} mainArray the main array.\r\n * @param {*} animations the animation array.\r\n */\r\nfunction quickSort(mainArray, left, right, animations) {\r\n  if (left < right) {\r\n    let p = partition(mainArray, left, right, animations);\r\n    quickSort(mainArray, left, p - 1, animations);\r\n    quickSort(mainArray, p + 1, right, animations);\r\n  }\r\n}\r\n\r\n/**\r\n * Partition helper method for quick sort. Take the last element of the range as pivot element, then move\r\n * it to the correct index, then return that index.\r\n * \r\n * @param {*} mainArray the main array.\r\n * @param {*} left left index.\r\n * @param {*} right right  index.\r\n * @param {*} animations the animations array.\r\n * @returns the index that pivot moved to.\r\n */\r\nfunction partition(mainArray, left, right, animations) {\r\n  let pivot = mainArray[right];\r\n  let i = left;\r\n\r\n  for (let j = left; j < right; j++) {\r\n    // compare animations\r\n    animations.push([i, null, j, null, false, 'compare']);\r\n    animations.push([i, null, j, null, false, 'default']);\r\n\r\n    if (mainArray[j] < pivot) {\r\n      // swap mainArray[i] and mainArray[j]\r\n      let temp = mainArray[i];\r\n      mainArray[i] = mainArray[j];\r\n      mainArray[j] = temp;\r\n      if (i < j) {\r\n        // swap animation\r\n        animations.push([i, mainArray[i], j, mainArray[j], true, null]);\r\n      } else {\r\n        // no animation\r\n        animations.push([i, null, j, null, false, null]);\r\n      }\r\n      i++;\r\n    }else {\r\n      // no animation\r\n      animations.push([i, null, j, null, false, null]);\r\n    }\r\n  }\r\n  if (i < right) {\r\n    // compare and swap animations \r\n    animations.push([i, null, right, null, false, 'compare']);\r\n    animations.push([i, null, right, null, false, 'default']);\r\n\r\n    mainArray[right] = mainArray[i];\r\n    mainArray[i]= pivot;\r\n    animations.push([i, mainArray[i], right, mainArray[right], true, null]);\r\n  }\r\n  return i;\r\n}","/**\r\n * Perform heap sort then return animation array.\r\n * @param {*} mainArray the main array.\r\n * @returns animation array.\r\n */\r\nexport function getHeapSortAnimation(mainArray) {\r\n  const animations = [];\r\n  heapSort(mainArray, animations);\r\n  return animations;\r\n}\r\n\r\n/**\r\n * Perform heap sort algorithm on the main array.\r\n * \r\n * Animation array format: \r\n * [bar one index, bar one new height, bar two index, bar two new height, swap(boolean), color(String)]\r\n * \r\n * @param {*} mainArray the main array.\r\n * @param {*} animations the animation array.\r\n */\r\nfunction heapSort(mainArray, animations) {\r\n  const n = mainArray.length;\r\n  for(let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n    heapify(mainArray, n, i, animations);\r\n  }\r\n  for(let i = n - 1; i > 0; i--) {\r\n    const temp = mainArray[0];\r\n    mainArray[0] = mainArray[i];\r\n    mainArray[i] = temp;\r\n    animations.push([0, null, i, null, false, 'compare']);\r\n    animations.push([0, null, i, null, false, 'default']);\r\n    animations.push([0, mainArray[0], i, mainArray[i], true, null]);\r\n    \r\n    heapify(mainArray, i, 0, animations);\r\n  }\r\n}\r\n\r\n/**\r\n * Move the largest node to the root, if moved adjust the nodes below it.\r\n * @param {*} mainArray the main array.\r\n * @param {*} length the length of the array.\r\n * @param {*} index the index of the root.\r\n * @param {*} animations the animation array.\r\n */\r\nfunction heapify(mainArray, length, index, animations) {\r\n  let largestIndex = index;\r\n  const leftNodeIndex  = 2 * index + 1;\r\n  const rightNodeIndex = 2 * index + 2;\r\n\r\n  if(leftNodeIndex < length && mainArray[leftNodeIndex] > mainArray[largestIndex]) {\r\n    largestIndex = leftNodeIndex;\r\n  }\r\n\r\n  if(rightNodeIndex < length && mainArray[rightNodeIndex] > mainArray[largestIndex]) {\r\n    largestIndex = rightNodeIndex;\r\n  }\r\n\r\n  if(largestIndex !== index) {\r\n    animations.push([index, null, largestIndex, null, false, 'compare']);\r\n    animations.push([index, null, largestIndex, null, false, 'default']);\r\n    \r\n    const temp = mainArray[index];\r\n    mainArray[index] = mainArray[largestIndex];\r\n    mainArray[largestIndex] = temp;\r\n\r\n    animations.push([index, mainArray[index], largestIndex, mainArray[largestIndex], true, null]);\r\n    heapify(mainArray, length, largestIndex, animations);\r\n  }\r\n}","/**\r\n * Perform insertion sort then return animation array.\r\n * @param {*} mainArray the main array.\r\n * @returns animation array.\r\n */\r\nexport function getInsertionSortAnimation(mainArray) {\r\n  const animations = [];\r\n  insertionSort(mainArray, animations);\r\n  return animations;\r\n}\r\n\r\n/**\r\n * Perform insertion sort algorithm on the main array.\r\n * \r\n * Animation array format: \r\n * [bar one index, bar one new height, bar two index, bar two new height, swap(boolean), color(String)]\r\n * \r\n * @param {*} mainArray the main array.\r\n * @param {*} animations the animation array.\r\n */\r\nfunction insertionSort(mainArray, animations) {\r\n  let i, j, current;\r\n\r\n  for(i = 1; i < mainArray.length; i++) {\r\n    j = i - 1;\r\n    current = mainArray[i];\r\n\r\n    animations.push([i, null, j, null, false, 'compare']);\r\n    animations.push([i, null, j, null, false, 'default']);\r\n\r\n    while(j >= 0 && mainArray[j] > current) {\r\n      if (j < i - 1) {\r\n        // if swap more than 2 times then add compare animation\r\n        animations.push([j + 1, null, j, null, false, 'compare']);\r\n        animations.push([j + 1, null, j, null, false, 'default']);\r\n      }\r\n      animations.push([j + 1, mainArray[j], j, current, true, null]);\r\n      mainArray[j + 1] = mainArray[j];\r\n      j--;\r\n    }\r\n\r\n    if (j === i - 1) {\r\n      animations.push([i, null, j, null, false, null]);\r\n    }\r\n    mainArray[j + 1] = current;\r\n  }\r\n}","import React from \"react\";\r\nimport { getMergeSortAnimation } from '../SortingAlgorithms/MergeSort.js';\r\nimport { getBubbleSortAnimation } from \"../SortingAlgorithms/BubbleSort.js\";\r\nimport { getQuickSortAnimation } from \"../SortingAlgorithms/QuickSort.js\";\r\nimport { getHeapSortAnimation } from \"../SortingAlgorithms/HeapSort.js\";\r\nimport { getInsertionSortAnimation } from \"../SortingAlgorithms/InsertionSort.js\";\r\nimport './SortingVisualizer.css';\r\n\r\n/** The number of bars this sorting visualizer will generate. */\r\n//const NUMBER_OF_BARS = 100;\r\n\r\n/** The default color of the bars. */\r\nconst DEFAULT_COLOR = 'cornflowerblue';\r\n\r\n/** The color of the bars when its being compared. */\r\nconst COMPARE_COLOR = 'red';\r\n\r\n/** The color of the bars when its at the correct postion. */\r\nconst CORRECT_COLOR = 'lime';\r\n\r\n/** The default speed of the animation in millisecond. */\r\nconst DEFAULT_SPEED_MS = 20;\r\n\r\n/** The default array size. */\r\nconst DEFAULT_ARRAY_SIZE = 50;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  /**\r\n   * Constructor.\r\n   */\r\n  constructor(props){\r\n    super(props);\r\n      this.state = {\r\n        array: [],\r\n        size: DEFAULT_ARRAY_SIZE,\r\n        sortingSpeedMS: DEFAULT_SPEED_MS,\r\n        isSorting: false,\r\n      };\r\n\r\n      this.handleArraySizeChange = this.handleArraySizeChange.bind(this);\r\n      this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Generate a new array when this compoent initialized.\r\n   */\r\n  componentDidMount(){\r\n    this.resetArray();\r\n  }\r\n\r\n  /**\r\n   * Generate a new array.\r\n   */\r\n  resetArray(){\r\n    const array = [];\r\n    for(let i = 0; i < this.state.size; i++){\r\n      array.push(randomIntFromInterval(5, 500));\r\n      }\r\n    this.setState({array});\r\n  }\r\n\r\n  /**\r\n   * Perform merge sort.\r\n   */\r\n  mergeSort() {\r\n    // disable buttons\r\n    this.turnButtons();\r\n    const animations = getMergeSortAnimation(this.state.array);\r\n    this.playSortingAnimation(animations);\r\n  }\r\n\r\n  /**\r\n   * Perform bubble sort.\r\n   */\r\n  bubbleSort() {\r\n    this.turnButtons();\r\n    const animations = getBubbleSortAnimation(this.state.array);\r\n    this.playSortingAnimation(animations);\r\n  }\r\n\r\n  /**\r\n   * Perform quick sort.\r\n   */\r\n  quickSort() {\r\n    this.turnButtons();\r\n    const animations = getQuickSortAnimation(this.state.array);\r\n    this.playSortingAnimation(animations);\r\n  }\r\n\r\n  /**\r\n   * Perform heap sort.\r\n   */\r\n  heapSort() {\r\n    this.turnButtons();\r\n    const animations = getHeapSortAnimation(this.state.array);\r\n    this.playSortingAnimation(animations);\r\n  }\r\n\r\n  /**\r\n   * Perform insertion sort.\r\n   */\r\n  insertionSort() {\r\n    this.turnButtons();\r\n    const animations = getInsertionSortAnimation(this.state.array);\r\n    this.playSortingAnimation(animations);\r\n  }\r\n\r\n  /**\r\n   * Play sorting animation with given array by changing the color and height of the array bar.\r\n   * \r\n   * Animation array format: \r\n   * [bar one index, bar one new height, bar two index, bar two new height, swap(boolean), color(String)]\r\n   * \r\n   * @param {*} animations the animations array.\r\n   */\r\n  playSortingAnimation(animations) {\r\n    for(let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const [barOneIdx, barOneNewHeight, barTwoIdx, barTwoNewHeight, isSwap, color] = animations[i];\r\n\r\n      if (!isSwap && (color === 'default' || color === 'compare')) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        let newColor = COMPARE_COLOR;\r\n        if (color === 'default') {\r\n          newColor = DEFAULT_COLOR;\r\n        }\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = newColor;\r\n          barTwoStyle.backgroundColor = newColor;\r\n        }, i * this.state.sortingSpeedMS);\r\n      } else {\r\n        if (isSwap) {\r\n          setTimeout(() => {\r\n            if (barOneNewHeight != null) {\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${barOneNewHeight}px`;\r\n            }\r\n            if (barTwoNewHeight != null) {\r\n              const barTwoStyle = arrayBars[barTwoIdx].style;\r\n              barTwoStyle.height = `${barTwoNewHeight}px`;\r\n            }\r\n          }, i * this.state.sortingSpeedMS);\r\n        }\r\n      }\r\n      // turn buttons back on\r\n      if (i === animations.length - 1) {\r\n        this.playCompleteAnimation(i * this.state.sortingSpeedMS);\r\n        setTimeout(() => {\r\n        this.turnButtons();\r\n        }, i * this.state.sortingSpeedMS + 500);\r\n      } \r\n    }\r\n  }\r\n\r\n  /**\r\n   * Play sorting completion animation with given delay time.\r\n   * @param {*} delay the delay time.\r\n   */\r\n  playCompleteAnimation(delay) {\r\n    setTimeout(() => {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      for(let i = 0; i < arrayBars.length; i++) {\r\n        const style = arrayBars[i].style;\r\n        style.backgroundColor = CORRECT_COLOR;\r\n      }\r\n    }, delay);\r\n    setTimeout(() => {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      for(let i = 0; i < arrayBars.length; i++) {\r\n        const style = arrayBars[i].style;\r\n        style.backgroundColor = DEFAULT_COLOR;\r\n      }\r\n    }, delay + 500);\r\n  }\r\n\r\n  /**\r\n   * Updates the array size.\r\n   * @param {*} e the event.\r\n   */\r\n  handleArraySizeChange(e) {\r\n    this.setState({size: e.target.value});\r\n    // we want to reset array after size is updated.\r\n    setTimeout(() => {\r\n      this.resetArray();\r\n    }, 1);\r\n  }\r\n\r\n  /**\r\n   * Updates the sorting speed.\r\n   * @param {*} e the event.\r\n   */\r\n  handleSpeedChange(e) {\r\n    let newSpeed = DEFAULT_SPEED_MS / e.target.value;\r\n    this.setState({sortingSpeedMS: newSpeed});\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h1 className='title'>Sorting Visualizer</h1>\r\n        <div className='center-container'>  \r\n          <div className=\"array-container\">\r\n            <div className=\"invicible-array-bar\"></div>\r\n            {array.map((value, idx) => (\r\n              <div \r\n              className=\"array-bar\" key={idx} \r\n              style={{backgroundColor: DEFAULT_COLOR, height: `${value}px`}}>\r\n              </div>\r\n            ))}\r\n\r\n          </div>\r\n          <div className=\"button-bar\">\r\n            <span className=\"text\">Adjust Array Size: </span>\r\n            <input className=\"slider\" id=\"sizeSlider\" type=\"range\" min=\"5\" max=\"100\" step=\"1\"\r\n              defaultValue={DEFAULT_ARRAY_SIZE} \r\n              onChange={this.handleArraySizeChange}/>\r\n            <span className=\"text\">Adjust Sorting Speed: </span>\r\n            <input className=\"slider\" id=\"speedSlider\" type=\"range\" min=\"1\" max=\"4\" step=\"1\"\r\n              defaultValue=\"1\" \r\n              onChange={this.handleSpeedChange} />\r\n            <button className=\"button\" disabled={false} onClick={() => this.resetArray()}>Generate New Array</button>\r\n          </div>\r\n\r\n          <div className=\"button-bar\">\r\n            <button className=\"button\" disabled={false} onClick={() => this.mergeSort()}>Merge Sort</button>\r\n            <button className=\"button\" disabled={false} onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n            <button className=\"button\" disabled={false} onClick={() => this.quickSort()}>Quick Sort</button>\r\n            <button className=\"button\" disabled={false} onClick={() => this.heapSort()}>Heap Sort</button>\r\n            <button className=\"button\" disabled={false} onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n          </div>\r\n          \r\n          <span className=\"info\">Array size: {this.state.size} &nbsp; &nbsp; Speed: x{20/this.state.sortingSpeedMS}</span>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Turn all button on or off.\r\n   */\r\n  turnButtons(){\r\n      const buttons = document.getElementsByClassName('button');\r\n      for(let i = 0; i < buttons.length; i++){\r\n          buttons[i].disabled = !buttons[i].disabled;\r\n      }\r\n      const sliders = document.getElementsByClassName('slider');\r\n      for(let i = 0; i < sliders.length; i++){\r\n          sliders[i].disabled = !sliders[i].disabled;\r\n      }\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const sortedArray = getInsertionSortAnimation(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Genrenate a integer with given interval.\r\n * From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\n * \r\n * @param {*} min minimum of the interval.\r\n * @param {*} max maximum of the interval.\r\n * @returns a random integer.\r\n */\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n/**\r\n * Check if the given two arrays have the same values.\r\n * @param {*} arrayOne  the first array.\r\n * @param {*} arrayTwo  the second array.\r\n * @returns whether the given two arrays have the same values.\r\n */\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n      if (arrayOne[i] !== arrayTwo[i]) {\r\n        return false;\r\n      }\r\n    }\r\n  return true;\r\n}","/**\r\n * Perform bubble sort then return animation array.\r\n * @param {*} mainArray the main array.\r\n * @returns animation array.\r\n */\r\nexport function getBubbleSortAnimation(mainArray) {\r\n  const animations = [];\r\n  bubbleSort(mainArray, animations);\r\n  return animations;\r\n}\r\n\r\n/**\r\n * Perform bubble sort algorithm on the main array.\r\n * \r\n * Animation array format: \r\n * [bar one index, bar one new height, bar two index, bar two new height, swap(boolean), color(String)]\r\n * \r\n * @param {*} mainArray the main array.\r\n * @param {*} animations the animation array.\r\n */\r\nfunction bubbleSort(mainArray, animations) {\r\n  let hasIterationSwap = false;\r\n  let n = mainArray.length - 1;\r\n\r\n  for(let i = 0; i < n; i++) {\r\n    hasIterationSwap = false;\r\n    for(let j = 0; j < n - i; j++) {\r\n      let swap = false;\r\n\r\n      animations.push([j, null, j + 1, null, swap, 'compare']);\r\n      animations.push([j, null, j + 1, null, swap, 'default']);\r\n\r\n      if (mainArray[j] > mainArray[j + 1]) {\r\n        let temp = mainArray[j];\r\n        mainArray[j] = mainArray[j + 1];\r\n        mainArray[j + 1] = temp;\r\n        hasIterationSwap = true;\r\n        swap = true;\r\n      }\r\n      animations.push([j, mainArray[j], j + 1, mainArray[j + 1], swap, null]);\r\n\r\n    }\r\n    if (!hasIterationSwap) break;\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}